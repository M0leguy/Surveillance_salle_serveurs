import network
import time
from machine import Pin, PWM, I2C
import dht
import ujson
from i2c_lcd import I2cLcd
import umail

# Configuration du Wi-Fi
ssid = 'Wokwi-GUEST'
password = ''

# D√©tails de l'email
sender_email = 'tizi.tztaz2@gmail.com'
sender_name = 'Salle des serveurs du SITE 1 '
sender_app_password = 'iikramctwewtidqf'
recipient_email = 'ziadessaidi.2727@gmail.com'
email_subject = 'üö® Alerte : Intrusion ou Condition Critique D√©tect√©e.'

# Seuils de temp√©rature et d'humidit√©
TEMP_HIGH = 27 * 1.04
TEMP_LOW = 18 * 0.96
TEMP_CRIT = 60
HUMID_HIGH = 60 * 1.04
HUMID_LOW = 40 * 0.96
HUMID_CRIT = 70

# Configuration du mouvement (PIR)
pir_pin = Pin(23, Pin.IN)

# Configuration de l'I2C pour l'√©cran LCD1602 (ou un mod√®le 20x4)
i2c = I2C(0, scl=Pin(22), sda=Pin(21))
lcd = I2cLcd(i2c, 0x27, 4, 20)

# Capteur de temp√©rature et d'humidit√©
sensor = dht.DHT22(Pin(15))

# Initialisation du buzzer
buzzer_pin = Pin(4, Pin.OUT)
buzzer_pwm = PWM(buzzer_pin, freq=1000, duty=0)

# Variables pour suivre les alertes
email_sent = False
last_alert = None

# Connexion au Wi-Fi
def connect_wifi(ssid, password):
    sta_if = network.WLAN(network.STA_IF)
    sta_if.active(True)
    sta_if.connect(ssid, password)
    while not sta_if.isconnected():
        time.sleep(0.1)
    print("Connected to WiFi")

# Fonction pour √©mettre un son sur le buzzer
def tone(frequency, duration):
    buzzer_pwm.freq(frequency)
    buzzer_pwm.duty(512)
    time.sleep(duration)
    buzzer_pwm.duty(0)

# Fonction pour mettre √† jour l'affichage LCD
def update_lcd(temp, humidity, intrusion=False):
    lcd.clear()
    lcd.putstr(f'Temp: {temp:.1f}C')
    lcd.move_to(0, 1)
    lcd.putstr(f'Humid: {humidity:.1f}%')
    lcd.move_to(0, 2)
    lcd.putstr("Intrusion!" if intrusion else "")

# Fonction pour envoyer un email d'alerte
def send_alert(temp, humidity, intrusion):
    global email_sent, last_alert
    current_alert = {
        "temp": temp,
        "humidity": humidity,
        "intrusion": intrusion
    }
    
    # V√©rifie si l'alerte actuelle est diff√©rente de la derni√®re
    if last_alert != current_alert:
        smtp = umail.SMTP('smtp.gmail.com', 465, ssl=True)
        smtp.login(sender_email, sender_app_password)
        smtp.to(recipient_email)
        smtp.write("From:" + sender_name + "<" + sender_email + ">\n")
        smtp.write("Subject:" + email_subject + "\n")
        smtp.write(f"""Bonjour,

Une alerte a √©t√© d√©clench√©e dans votre environnement surveill√© :

- Temp√©rature actuelle : {temp} ¬∞C
- Humidit√© actuelle : {humidity} %
- Intrusion d√©tect√©e : {"Oui" if intrusion else "Non"}

Prenez des mesures imm√©diates pour contr√¥ler la situation et v√©rifier l'√©tat des capteurs.
""")
        smtp.send()
        smtp.quit()
        email_sent = True
        last_alert = current_alert  # Met √† jour la derni√®re alerte
        print("Alerte envoy√©e par email.")

# V√©rification de la temp√©rature et de l'humidit√©
def check_conditions(temperature, humidity):
    critical = False
    if TEMP_LOW <= temperature < TEMP_HIGH:
        print("Temp√©rature normale")
    elif TEMP_HIGH <= temperature < TEMP_CRIT:
        print("Attention! La salle est en surchauffe")
        tone(2000, 0.5)
        critical = True
    elif temperature <= TEMP_LOW:
        print("Attention! La salle est en refroidissement")
        tone(2000, 0.5)
        critical = True
    elif temperature >= TEMP_CRIT:
        print("Temp√©rature critique!")
        tone(500, 1)
        critical = True

    if HUMID_LOW <= humidity < HUMID_HIGH:
        print("Humidit√© normale")
    elif HUMID_HIGH <= humidity < HUMID_CRIT:
        print("Attention! La salle est en humidification")
        tone(1000, 0.5)
        critical = True
    elif humidity <= HUMID_LOW:
        print("Attention! La salle manque d'humidit√©")
        tone(1000, 0.5)
        critical = True
    elif humidity >= HUMID_CRIT:
        print("Humidit√© critique!")
        tone(250, 1)
        critical = True

    return critical

# Fonction pour d√©tecter une intrusion
def check_intrusion():
    if pir_pin.value() == 1:
        print("Intrusion d√©tect√©e!")
        tone(3000, 0.5)
        return True
    return False

# Boucle principale
connect_wifi(ssid, password)
while True:
    sensor.measure()
    temperature = sensor.temperature()
    humidity = sensor.humidity()
    intrusion_detected = check_intrusion()

    # V√©rification des conditions critiques et intrusion
    critical_condition = check_conditions(temperature, humidity)

    # Mise √† jour du LCD
    update_lcd(temperature, humidity, intrusion_detected)

    # Envoi d'un email si condition critique ou intrusion d√©tect√©e
    if critical_condition or intrusion_detected:
        send_alert(temperature, humidity, intrusion_detected)

    time.sleep(1)
